#pragma once

#include <string>
#include <vector>
#include <functional>
#include <memory>
#include <unordered_set>

#include "Color.h"
#include "../Math/Vector2.h"

namespace SAGE {

    class GameObject {
    public:
        // üè∑Ô∏è –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        std::string name;
        bool active = true;
        int layer = 0;
        
        // üìç –ü–æ–∑–∏—Ü–∏—è –∏ —Ä–∞–∑–º–µ—Ä
        float x = 0;
        float y = 0;
        float angle = 0;        // –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ (–≥—Ä–∞–¥—É—Å—ã)
        float width = 32;       // –®–∏—Ä–∏–Ω–∞
        float height = 32;      // –í—ã—Å–æ—Ç–∞
        
        // üèÉ –°–∫–æ—Ä–æ—Å—Ç—å
        float speedX = 0;
        float speedY = 0;
        
        // ‚öôÔ∏è –§–∏–∑–∏–∫–∞
        float gravity = 0;      // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è (–ø–∏–∫—Å–µ–ª–∏/—Å–µ–∫¬≤)
        float friction = 0;     // –¢—Ä–µ–Ω–∏–µ (0-1)
        float bounce = 0;       // –û—Ç—Å–∫–æ–∫ (0-1)
        bool physics = false;   // –í–∫–ª—é—á–∏—Ç—å —Ñ–∏–∑–∏–∫—É
    float maxFallSpeed = 1500.0f; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–∞–¥–µ–Ω–∏—è
        float mass = 1.0f;        // –ú–∞—Å—Å–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å–∏–ª
        float gravityScale = 1.0f;// –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
        float jumpStrength = 650.0f; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∏–ª–∞ –ø—Ä—ã–∂–∫–∞
        float coyoteTime = 0.08f;    // –í—Ä–µ–º—è –Ω–∞ –ª–µ—Å—É
        float jumpBuffer = 0.1f;     // –í—Ä–µ–º—è –±—É—Ñ–µ—Ä–∞ –ø—Ä—ã–∂–∫–∞
        
        // üé® –í–∏–∑—É–∞–ª
        std::string image;      // –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
        Color color;            // –¶–≤–µ—Ç
        float alpha = 1.0f;     // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (0-1)
        bool visible = true;    // –í–∏–¥–∏–º—ã–π
        bool flipX = false;     // –û—Ç–∑–µ—Ä–∫–∞–ª–∏—Ç—å –ø–æ X
        bool flipY = false;     // –û—Ç–∑–µ—Ä–∫–∞–ª–∏—Ç—å –ø–æ Y
        
        // üí• –ö–æ–ª–ª–∏–∑–∏—è
        bool collision = false; // –í–∫–ª—é—á–∏—Ç—å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
        bool solid = true;      // –¢–≤—ë—Ä–¥—ã–π (–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ)
        std::string hitboxType = "box"; // "box" –∏–ª–∏ "circle"
        
        // üéØ –°–æ–±—ã—Ç–∏—è (–ª—è–º–±–¥—ã)
    std::function<void()> OnCreate;
    std::function<void(float)> OnUpdate;
        std::function<void(GameObject*)> OnCollision;          // –í—ã–∑–æ–≤ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–ª–ª–∏–∑–∏—é (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        std::function<void(GameObject*)> OnCollisionEnter;     // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ OnCollision: —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        std::function<void(GameObject*)> OnCollisionStay;      // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä, –ø–æ–∫–∞ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
        std::function<void(GameObject*)> OnCollisionExit;      // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        std::function<void()> OnDestroy;
        
        // üõ†Ô∏è –ú–µ—Ç–æ–¥—ã
        void MoveTo(float newX, float newY);
        void MoveBy(float deltaX, float deltaY);
        void Jump(float force);
        void Push(float forceX, float forceY);
        void Stop();
        void Destroy();
        bool IsGrounded() const { return grounded || wasGroundedLastFrame; }
        bool IsGroundedStrict() const { return grounded; }
        void SetMass(float newMass);
        void SetGravityScale(float scale) { gravityScale = scale; }
        void SetJumpStrength(float strength) { jumpStrength = strength; }
        void SetCoyoteTime(float seconds);
        void SetJumpBuffer(float seconds);
        void ApplyForce(const Vector2& force);
        void ApplyImpulse(const Vector2& impulse);
        void ClearForces();
        Vector2 GetVelocity() const { return Vector2(speedX, speedY); }
        void SetVelocity(const Vector2& velocity);
        void Jump();
        
        bool IsTouching(GameObject* other);
        bool IsOnScreen();
        
        // üìä –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏)
        static GameObject* Create(const std::string& name);
        static void UpdateAll(float deltaTime);
        static void RenderAll();
        static void DestroyMarked();
        static void DestroyAll();
        static GameObject* Find(const std::string& name);
        static std::vector<GameObject*> FindAll(const std::string& name);
        static int Count();
        
    private:
        bool markedForDestruction = false;
        bool grounded = false;
        float prevX = 0;
        float prevY = 0;
        
    float inverseMass = 1.0f;
    Vector2 accumulatedForces = Vector2::Zero();
    float coyoteTimer = 0.0f;
    float jumpBufferTimer = 0.0f;
    float pendingJumpVelocity = 0.0f;
    bool jumpQueued = false;
    bool wasGroundedLastFrame = false;

    void BeginPhysicsStep(float deltaTime);
    void HandleJumpRequest();
        void UpdatePhysics(float deltaTime);
        void UpdatePosition(float deltaTime);
        void CheckCollisions(float deltaTime);
        void ResolveCollision(GameObject* other, float overlapX, float overlapY);
        void ClearCollision(GameObject* other);
        
        static std::vector<GameObject*> allObjects;
        static std::vector<GameObject*> objectsToDestroy;
        std::unordered_set<GameObject*> currentContacts;
    };

} // namespace SAGE
