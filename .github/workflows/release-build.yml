name: Release Build (multi-OS)
on:
  release:
    types: [created]
jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.* build
      - name: Build wheels (cibuildwheel)
        env:
          CIBW_SKIP: "pp*"
        run: |
          cibuildwheel --output-dir wheelhouse
      - name: Upload wheels to release (per OS)
        uses: softprops/action-gh-release@v1
        with:
          files: wheelhouse/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  aggregate-and-upload:
    needs: build-wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create sdist and zip installer
        run: |
          python -m pip install --upgrade build
          python -m build --sdist --wheel
          mkdir -p release_artifacts
          cp dist/* release_artifacts/ || true
          zip -r release_artifacts/sage_engine_portable_${{ github.ref_name }}.zip . -x .git\* release_artifacts\*
      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          files: release_artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    needs: aggregate-and-upload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install twine
        run: python -m pip install --upgrade twine
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m pip install --upgrade twine
          twine upload dist/* -u "${TWINE_USERNAME}" -p "${TWINE_PASSWORD}" || true


- name: Sign plugin registry (optional)
  if: ${{ secrets.PLUGIN_SIGN_SEED_B64 != '' }}
  run: |
    python -m pip install pynacl
    python scripts/sign_registry.py
  env:
    PLUGIN_SIGN_SEED_B64: ${{ secrets.PLUGIN_SIGN_SEED_B64 }}
